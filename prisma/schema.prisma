model Shop {
  id              String            @id @default(cuid())
  shopDomain      String            @unique
  scope           String?
  installedAt     DateTime          @default(now())
  billingPlan     BillingPlan       @default(None)
  pendingPlan     BillingPlan?
  lastTotalMetric Float             @default(0)
  apiMode         Boolean           @default(false)
  youtubeApiKey   String?
  facebookAccessToken String?
  instagramAccessToken String?
  tiktokAccessToken String?
  pinterestAccessToken String?
  socialLinks     SocialAccount[]
  apiData         ApiData[]
}

enum BillingPlan {
  None
  Basic
  Pro
  Enterprise
}

model Platform {
  id        String           @id // z. B. "instagram", "youtube"
  name      String           // Anzeigename
  baseUrl   String           // z. B. "https://instagram.com/"
  iconUrl   String           // z. B. "/icons/instagram.svg"
  accounts  SocialAccount[]
  apiData   ApiData[]
}

model SocialAccount {
  id          String   @id @default(cuid())
  shop        Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
  shopId      String
  platform    Platform @relation(fields: [platformId], references: [id])
  platformId  String
  
  profileName String
  profileUrl  String
  followers   Float    @default(0)
  likes       Float    @default(0)
  views       Float    @default(0)
  posts       Float    @default(0)
  lastFetched DateTime @default(now())
  isActive    Boolean  @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([shopId, platformId])
}

model Metric {
  id          String   @id @default(cuid())
  account     SocialAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId   String
  
  followers   Float
  likes       Float
  views       Float
  posts       Float
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ApiData {
  id          String   @id @default(cuid())
  shop        Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
  shopId      String
  platform    Platform @relation(fields: [platformId], references: [id])
  platformId  String
  
  profileName String
  followers   Float    @default(0)
  likes       Float    @default(0)
  views       Float    @default(0)
  posts       Float    @default(0)
  lastFetched DateTime @default(now())
  isActive    Boolean  @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([shopId, platformId])
}